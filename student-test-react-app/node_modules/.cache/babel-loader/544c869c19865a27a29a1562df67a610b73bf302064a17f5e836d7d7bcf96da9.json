{"ast":null,"code":"var _jsxFileName = \"/Users/zain/Blockchain_Project/Student_Test/student-test-react-app/src/components/TestScreen.js\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport QuestionList from \"../data/questions.json\";\nimport TestResult from \"./TestResult.js\";\nimport Question from \"./Question.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction TestScreen(_ref) {\n  _s();\n  let {\n    retry\n  } = _ref;\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [markedAnswers, setMarkedAnswers] = useState(new Array(QuestionList.length));\n  const isQuestionEnd = currentQuestionIndex === QuestionList.length;\n  function calculateResult() {\n    let correct = 0;\n    QuestionList.forEach((question, index) => {\n      if (question.correctOptionIndex === markedAnswers[index]) {\n        correct++;\n      }\n    });\n    return {\n      total: QuestionList.length,\n      correct: correct,\n      percentage: Math.trunc(correct / QuestionList.length * 100)\n    };\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"test-screen\",\n    children: isQuestionEnd ? /*#__PURE__*/_jsxDEV(TestResult, {\n      result: calculateResult(),\n      retry: retry\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(Question, {\n      question: QuestionList[currentQuestionIndex],\n      totalQuestions: QuestionList.length,\n      currentQuestion: currentQuestionIndex === 1,\n      setAnswer: index => {\n        setMarkedAnswers(arr => {\n          let newArray = [--arr];\n          newArray[currentQuestionIndex] = index;\n          return newArray;\n        });\n        setCurrentQuestionIndex(currentQuestionIndex + 1);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 5\n  }, this);\n}\n_s(TestScreen, \"5/Ub/99921SakabdjljTjF5ZABs=\");\n_c = TestScreen;\nexport default TestScreen;\nvar _c;\n$RefreshReg$(_c, \"TestScreen\");","map":{"version":3,"names":["useState","QuestionList","TestResult","Question","jsxDEV","_jsxDEV","TestScreen","_ref","_s","retry","currentQuestionIndex","setCurrentQuestionIndex","markedAnswers","setMarkedAnswers","Array","length","isQuestionEnd","calculateResult","correct","forEach","question","index","correctOptionIndex","total","percentage","Math","trunc","className","children","result","fileName","_jsxFileName","lineNumber","columnNumber","totalQuestions","currentQuestion","setAnswer","arr","newArray","_c","$RefreshReg$"],"sources":["/Users/zain/Blockchain_Project/Student_Test/student-test-react-app/src/components/TestScreen.js"],"sourcesContent":["import { useState } from \"react\";\nimport QuestionList from \"../data/questions.json\";\nimport TestResult from \"./TestResult.js\";\nimport Question from \"./Question.js\";\n\nfunction TestScreen({ retry }) {\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [markedAnswers, setMarkedAnswers] = useState(\n    new Array(QuestionList.length)\n  );\n  const  isQuestionEnd = currentQuestionIndex === QuestionList.length;\n\n  function calculateResult() {\n\tlet correct = 0;\n\tQuestionList.forEach((question, index) => {\n\t  if (question.correctOptionIndex === markedAnswers[index]) {\n\t\tcorrect++;\n\t  }\n\t});\n  \n\treturn {\n\t  total: QuestionList.length,\n\t  correct: correct,\n\t  percentage: Math.trunc((correct / QuestionList.length) * 100),\n\t};\n  }\n  \n\n  return (\n    <div className=\"test-screen\">\n      {\n\t  isQuestionEnd ? (\n        < TestResult result={calculateResult()} retry={retry} />\n      ) : (\n        < Question\n          question= { QuestionList[currentQuestionIndex]}\n\t\t  totalQuestions = {QuestionList.length}\n          currentQuestion={currentQuestionIndex === 1}\n          setAnswer = {(index) => {\n            setMarkedAnswers((arr) => {\n              let newArray = [--arr];\n              newArray[currentQuestionIndex] = index;\n              return newArray;\n            });\n            setCurrentQuestionIndex(currentQuestionIndex + 1);\n          }}\n        />\n      )\n\t  }\n    </div>\n  );\n}\nexport default TestScreen;\n"],"mappings":";;AAAA,SAASA,QAAQ,QAAQ,OAAO;AAChC,OAAOC,YAAY,MAAM,wBAAwB;AACjD,OAAOC,UAAU,MAAM,iBAAiB;AACxC,OAAOC,QAAQ,MAAM,eAAe;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAErC,SAASC,UAAUA,CAAAC,IAAA,EAAY;EAAAC,EAAA;EAAA,IAAX;IAAEC;EAAM,CAAC,GAAAF,IAAA;EAC3B,MAAM,CAACG,oBAAoB,EAAEC,uBAAuB,CAAC,GAAGX,QAAQ,CAAC,CAAC,CAAC;EACnE,MAAM,CAACY,aAAa,EAAEC,gBAAgB,CAAC,GAAGb,QAAQ,CAChD,IAAIc,KAAK,CAACb,YAAY,CAACc,MAAM,CAC/B,CAAC;EACD,MAAOC,aAAa,GAAGN,oBAAoB,KAAKT,YAAY,CAACc,MAAM;EAEnE,SAASE,eAAeA,CAAA,EAAG;IAC5B,IAAIC,OAAO,GAAG,CAAC;IACfjB,YAAY,CAACkB,OAAO,CAAC,CAACC,QAAQ,EAAEC,KAAK,KAAK;MACxC,IAAID,QAAQ,CAACE,kBAAkB,KAAKV,aAAa,CAACS,KAAK,CAAC,EAAE;QAC3DH,OAAO,EAAE;MACR;IACF,CAAC,CAAC;IAEF,OAAO;MACLK,KAAK,EAAEtB,YAAY,CAACc,MAAM;MAC1BG,OAAO,EAAEA,OAAO;MAChBM,UAAU,EAAEC,IAAI,CAACC,KAAK,CAAER,OAAO,GAAGjB,YAAY,CAACc,MAAM,GAAI,GAAG;IAC9D,CAAC;EACA;EAGA,oBACEV,OAAA;IAAKsB,SAAS,EAAC,aAAa;IAAAC,QAAA,EAE7BZ,aAAa,gBACRX,OAAA,CAAEH,UAAU;MAAC2B,MAAM,EAAEZ,eAAe,CAAC,CAAE;MAACR,KAAK,EAAEA;IAAM;MAAAqB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,gBAExD5B,OAAA,CAAEF,QAAQ;MACRiB,QAAQ,EAAInB,YAAY,CAACS,oBAAoB,CAAE;MACrDwB,cAAc,EAAIjC,YAAY,CAACc,MAAO;MAChCoB,eAAe,EAAEzB,oBAAoB,KAAK,CAAE;MAC5C0B,SAAS,EAAKf,KAAK,IAAK;QACtBR,gBAAgB,CAAEwB,GAAG,IAAK;UACxB,IAAIC,QAAQ,GAAG,CAAC,EAAED,GAAG,CAAC;UACtBC,QAAQ,CAAC5B,oBAAoB,CAAC,GAAGW,KAAK;UACtC,OAAOiB,QAAQ;QACjB,CAAC,CAAC;QACF3B,uBAAuB,CAACD,oBAAoB,GAAG,CAAC,CAAC;MACnD;IAAE;MAAAoB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH;EACF;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAEE,CAAC;AAEV;AAACzB,EAAA,CA9CQF,UAAU;AAAAiC,EAAA,GAAVjC,UAAU;AA+CnB,eAAeA,UAAU;AAAC,IAAAiC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}