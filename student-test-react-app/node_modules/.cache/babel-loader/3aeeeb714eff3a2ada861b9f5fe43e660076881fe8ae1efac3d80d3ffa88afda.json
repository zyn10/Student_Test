{"ast":null,"code":"var _jsxFileName = \"/Users/zain/Blockchain_Project/Student_Test/student-test-react-app/src/components/TestScreen.js\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport QuestionList from \"../data/questions.json\";\nimport TestResult from \"./TestResult.js\";\nimport Question from \"./Question.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction TestScreen(_ref) {\n  _s();\n  let {\n    retry\n  } = _ref;\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [markedAnswers, setMarkedAnswers] = useState(new Array(QuestionList.length));\n  const isQustionEnd = currentQuestionIndex = QuestionList.length;\n  const calculateResult = () => {\n    let correct = 0;\n    QuestionList.forEach((question, index) => {\n      if (question.correctOptionIndex === markedAnswer[index]) {\n        correct++;\n      }\n    });\n    return {\n      total: QuestionList.length,\n      correct: correct,\n      percentage: Math.trunc(correct / QuestionList.length * 100)\n    };\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"test-screen\",\n    children: isQustionEnd ? /*#__PURE__*/_jsxDEV(TestResult, {\n      result: calculateResult(),\n      retry: retry\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(Question, {\n      question: QuestionList[currentQuestionIndex],\n      totalQuestions: QuestionList.length,\n      currentQuestion: currentQuestionIndex = 1,\n      setAnswers: index => {\n        setMarkedAnswers(arr => {\n          let newArray = [--arr];\n          newArray[currentQuestionIndex] = index;\n          return newArray;\n        });\n        setCurrentQuestionIndex(currentQuestionIndex + 1);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 5\n  }, this);\n}\n_s(TestScreen, \"5/Ub/99921SakabdjljTjF5ZABs=\");\n_c = TestScreen;\nexport default TestScreen;\nvar _c;\n$RefreshReg$(_c, \"TestScreen\");","map":{"version":3,"names":["useState","QuestionList","TestResult","Question","jsxDEV","_jsxDEV","TestScreen","_ref","_s","retry","currentQuestionIndex","setCurrentQuestionIndex","markedAnswers","setMarkedAnswers","Array","length","isQustionEnd","calculateResult","correct","forEach","question","index","correctOptionIndex","markedAnswer","total","percentage","Math","trunc","className","children","result","fileName","_jsxFileName","lineNumber","columnNumber","totalQuestions","currentQuestion","setAnswers","arr","newArray","_c","$RefreshReg$"],"sources":["/Users/zain/Blockchain_Project/Student_Test/student-test-react-app/src/components/TestScreen.js"],"sourcesContent":["import { useState } from \"react\";\nimport QuestionList from \"../data/questions.json\";\nimport TestResult from \"./TestResult.js\";\nimport Question from \"./Question.js\";\n\nfunction TestScreen({retry}) {\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [markedAnswers, setMarkedAnswers] = useState(\n    new Array(QuestionList.length)\n  );\n  const isQustionEnd = (currentQuestionIndex = QuestionList.length);\n\n  const calculateResult = () => {\n\tlet correct = 0;\n\tQuestionList.forEach((question, index) => {\n\t\tif (question.correctOptionIndex === markedAnswer[index]) {\n\t\t\tcorrect++;\n\t\t}\n\t});\n\treturn {\n\t\ttotal: QuestionList.length,\n\t\tcorrect: correct,\n\t\tpercentage: Math.trunc((correct / QuestionList.length) * 100)\n\t};\n}\n\n\n  return (\n    <div className=\"test-screen\">\n      {isQustionEnd ? (\n        <TestResult \n\t\tresult = {calculateResult()}\n\t\tretry ={retry}\n\t\t/>\n      ) : (\n        <Question \n          question={QuestionList[currentQuestionIndex]}\n          totalQuestions={QuestionList.length}\n          currentQuestion={(currentQuestionIndex = 1)}\n          setAnswers={(index) => {\n            setMarkedAnswers((arr) => {\n              let newArray = [--arr];\n              newArray[currentQuestionIndex] = index;\n              return newArray;\n            });\n            setCurrentQuestionIndex(currentQuestionIndex + 1);\n          }}\n        />\n      )}\n    </div>\n  );\n}\nexport default TestScreen;\n"],"mappings":";;AAAA,SAASA,QAAQ,QAAQ,OAAO;AAChC,OAAOC,YAAY,MAAM,wBAAwB;AACjD,OAAOC,UAAU,MAAM,iBAAiB;AACxC,OAAOC,QAAQ,MAAM,eAAe;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAErC,SAASC,UAAUA,CAAAC,IAAA,EAAU;EAAAC,EAAA;EAAA,IAAT;IAACC;EAAK,CAAC,GAAAF,IAAA;EACzB,MAAM,CAACG,oBAAoB,EAAEC,uBAAuB,CAAC,GAAGX,QAAQ,CAAC,CAAC,CAAC;EACnE,MAAM,CAACY,aAAa,EAAEC,gBAAgB,CAAC,GAAGb,QAAQ,CAChD,IAAIc,KAAK,CAACb,YAAY,CAACc,MAAM,CAC/B,CAAC;EACD,MAAMC,YAAY,GAAIN,oBAAoB,GAAGT,YAAY,CAACc,MAAO;EAEjE,MAAME,eAAe,GAAGA,CAAA,KAAM;IAC/B,IAAIC,OAAO,GAAG,CAAC;IACfjB,YAAY,CAACkB,OAAO,CAAC,CAACC,QAAQ,EAAEC,KAAK,KAAK;MACzC,IAAID,QAAQ,CAACE,kBAAkB,KAAKC,YAAY,CAACF,KAAK,CAAC,EAAE;QACxDH,OAAO,EAAE;MACV;IACD,CAAC,CAAC;IACF,OAAO;MACNM,KAAK,EAAEvB,YAAY,CAACc,MAAM;MAC1BG,OAAO,EAAEA,OAAO;MAChBO,UAAU,EAAEC,IAAI,CAACC,KAAK,CAAET,OAAO,GAAGjB,YAAY,CAACc,MAAM,GAAI,GAAG;IAC7D,CAAC;EACF,CAAC;EAGC,oBACEV,OAAA;IAAKuB,SAAS,EAAC,aAAa;IAAAC,QAAA,EACzBb,YAAY,gBACXX,OAAA,CAACH,UAAU;MACjB4B,MAAM,EAAIb,eAAe,CAAC,CAAE;MAC5BR,KAAK,EAAGA;IAAM;MAAAsB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACb,CAAC,gBAEI7B,OAAA,CAACF,QAAQ;MACPiB,QAAQ,EAAEnB,YAAY,CAACS,oBAAoB,CAAE;MAC7CyB,cAAc,EAAElC,YAAY,CAACc,MAAO;MACpCqB,eAAe,EAAG1B,oBAAoB,GAAG,CAAG;MAC5C2B,UAAU,EAAGhB,KAAK,IAAK;QACrBR,gBAAgB,CAAEyB,GAAG,IAAK;UACxB,IAAIC,QAAQ,GAAG,CAAC,EAAED,GAAG,CAAC;UACtBC,QAAQ,CAAC7B,oBAAoB,CAAC,GAAGW,KAAK;UACtC,OAAOkB,QAAQ;QACjB,CAAC,CAAC;QACF5B,uBAAuB,CAACD,oBAAoB,GAAG,CAAC,CAAC;MACnD;IAAE;MAAAqB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH;EACF;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV;AAAC1B,EAAA,CA9CQF,UAAU;AAAAkC,EAAA,GAAVlC,UAAU;AA+CnB,eAAeA,UAAU;AAAC,IAAAkC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}